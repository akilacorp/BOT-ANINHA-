console.log('üß† Verificando Sistema de Aprendizado Evolutivo...\n');

try {
    
    const evolutionaryLearning = require('./lib/evolutionary-learning');
    console.log('‚úÖ M√≥dulo carregado com sucesso');
    
    
    const isReady = evolutionaryLearning.isSystemReady();
    console.log(`üîç Sistema pronto: ${isReady ? 'SIM' : 'N√ÉO'}`);
    
    
    const stats = evolutionaryLearning.getStatistics();
    console.log('\nüìä ESTAT√çSTICAS:');
    console.log(`üë• Usu√°rios no sistema: ${stats.users}`);
    console.log(`üîÑ Total de adapta√ß√µes: ${stats.totalAdaptations}`);
    console.log(`üìù Vers√µes de personalidade: ${stats.personalityVersions}`);
    console.log(`üìã Tra√ßos base: ${stats.baseTraits}`);
    console.log(`‚è∞ √öltima atualiza√ß√£o: ${new Date(stats.lastUpdate).toLocaleString()}`);
    
    
    const fs = require('fs');
    const path = require('path');
    const memoryDbPath = path.join(__dirname, 'data', 'memory-db.json');
    
    if (fs.existsSync(memoryDbPath)) {
        const memoryDb = JSON.parse(fs.readFileSync(memoryDbPath, 'utf8'));
        const userCount = Object.keys(memoryDb.users).length;
        
        console.log(`\nüìö BANCO DE DADOS DE MEM√ìRIA:`);
        console.log(`üë• Total de usu√°rios: ${userCount}`);
        
        if (memoryDb.evolutionStats) {
            console.log(`üîÑ Total de adapta√ß√µes registradas: ${memoryDb.evolutionStats.totalAdaptations}`);
            console.log(`üìù Personalidade evolu√≠da ${memoryDb.evolutionStats.personalityVersions.length} vezes`);
            console.log(`‚è∞ √öltima evolu√ß√£o: ${new Date(memoryDb.evolutionStats.lastUpdate).toLocaleString()}`);
        }
        
        
        const userSample = Object.keys(memoryDb.users).slice(0, 3);
        if (userSample.length > 0) {
            console.log(`\nüë§ AMOSTRA DE USU√ÅRIOS:`);
            for (const userId of userSample) {
                const user = memoryDb.users[userId];
                console.log(`- ${userId.substring(0, 20)}... (${user.interactions ? user.interactions.length : 0} intera√ß√µes)`);
            }
        }
    } else {
        console.log(`\n‚ùå Arquivo de banco de dados n√£o encontrado: ${memoryDbPath}`);
    }
    
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da com sucesso!');
} catch (error) {
    console.error(`\n‚ùå ERRO AO VERIFICAR SISTEMA EVOLUTIVO:`);
    console.error(error);
}
